//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/_MyGameAssets/Game Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Game Controls"",
    ""maps"": [
        {
            ""name"": ""2D controls"",
            ""id"": ""ebaecb78-08b1-47a7-960e-4e0a305dd36f"",
            ""actions"": [
                {
                    ""name"": ""Move left / right"",
                    ""type"": ""Value"",
                    ""id"": ""752e30e7-5f8c-4313-add1-92ae9fef53b4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""9ece25a1-c4f3-4f28-be3e-101d72472c30"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""e6fa8c21-b609-4af1-85e3-704a5f033afd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Arrows"",
                    ""id"": ""ca1b99db-47ea-46eb-9019-88e62b5d613b"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move left / right"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ccbb97ae-20d2-44e6-9b4a-d20f68589656"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move left / right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""662fb0e5-59f1-4300-945c-3151dbff9769"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move left / right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""A / D"",
                    ""id"": ""01ff2e0c-160f-4029-8a8b-3841f9b564e7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move left / right"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a20ddd4a-17e2-4595-84fa-b5fadb87e4d2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move left / right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""93bee869-bddb-4e5c-a5bc-93c3fc7fbd42"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move left / right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""20f1bf58-56ff-4bc6-8069-5c1fb4597843"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d69aeb6-812c-4ca3-9961-ef2c81c94d03"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2632442d-b3e7-49f5-afe3-868c0e8271e5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57171e0d-3b16-4771-a008-b0505c00475b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3632d4b8-6e60-4d8c-bf85-b1e4a27fdec7"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6cf3e8be-2a53-4738-940c-c1e8d6e2e43d"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // 2D controls
        m__2Dcontrols = asset.FindActionMap("2D controls", throwIfNotFound: true);
        m__2Dcontrols_Moveleftright = m__2Dcontrols.FindAction("Move left / right", throwIfNotFound: true);
        m__2Dcontrols_Jump = m__2Dcontrols.FindAction("Jump", throwIfNotFound: true);
        m__2Dcontrols_Dash = m__2Dcontrols.FindAction("Dash", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // 2D controls
    private readonly InputActionMap m__2Dcontrols;
    private I_2DcontrolsActions m__2DcontrolsActionsCallbackInterface;
    private readonly InputAction m__2Dcontrols_Moveleftright;
    private readonly InputAction m__2Dcontrols_Jump;
    private readonly InputAction m__2Dcontrols_Dash;
    public struct _2DcontrolsActions
    {
        private @GameControls m_Wrapper;
        public _2DcontrolsActions(@GameControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Moveleftright => m_Wrapper.m__2Dcontrols_Moveleftright;
        public InputAction @Jump => m_Wrapper.m__2Dcontrols_Jump;
        public InputAction @Dash => m_Wrapper.m__2Dcontrols_Dash;
        public InputActionMap Get() { return m_Wrapper.m__2Dcontrols; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(_2DcontrolsActions set) { return set.Get(); }
        public void SetCallbacks(I_2DcontrolsActions instance)
        {
            if (m_Wrapper.m__2DcontrolsActionsCallbackInterface != null)
            {
                @Moveleftright.started -= m_Wrapper.m__2DcontrolsActionsCallbackInterface.OnMoveleftright;
                @Moveleftright.performed -= m_Wrapper.m__2DcontrolsActionsCallbackInterface.OnMoveleftright;
                @Moveleftright.canceled -= m_Wrapper.m__2DcontrolsActionsCallbackInterface.OnMoveleftright;
                @Jump.started -= m_Wrapper.m__2DcontrolsActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m__2DcontrolsActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m__2DcontrolsActionsCallbackInterface.OnJump;
                @Dash.started -= m_Wrapper.m__2DcontrolsActionsCallbackInterface.OnDash;
                @Dash.performed -= m_Wrapper.m__2DcontrolsActionsCallbackInterface.OnDash;
                @Dash.canceled -= m_Wrapper.m__2DcontrolsActionsCallbackInterface.OnDash;
            }
            m_Wrapper.m__2DcontrolsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Moveleftright.started += instance.OnMoveleftright;
                @Moveleftright.performed += instance.OnMoveleftright;
                @Moveleftright.canceled += instance.OnMoveleftright;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
            }
        }
    }
    public _2DcontrolsActions @_2Dcontrols => new _2DcontrolsActions(this);
    public interface I_2DcontrolsActions
    {
        void OnMoveleftright(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
    }
}
